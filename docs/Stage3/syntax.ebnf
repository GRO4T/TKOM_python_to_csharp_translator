newline ::= "\n"
tab ::= "\t"

identifier ::= [a-zA-Z_] [a-zA-Z0-9_]*
type ::= "int" | "float" | "string" | "bool"
digit ::= [0-9]

comparison_operator ::= "<=" | "<" | ">=" | ">" | "==" | "!="

integerConstant ::= ([1-9] digit*) | "0"
decimalConstant ::= ([1-9] digit*) | "0" "." digit* [1-9] 
logicalConstant ::= True | False
string ::= '"' ([^btnfr"'] | ("\" [btnfr"']))* '"'
value ::= 
	integerConstant | decimalConstant | logicalConstant | string

parameter ::= value | identifier

logicalFormula ::= 
	(parameter comparison_operator parameter) | (not? parameter)

logicalExpression ::= 
	"(" recursiveLogicalExpression ")" | logicalFormula

recursiveLogicalExpression ::= 
	(logicalExpression | (logicalExpression ("and" | "or") logicalExpression)) 

statement ::= 
	funcCallOrVarDefOrAssign | ifStatement | whileLoop | forLoop | functionDef

funcCallOrVarDefOrAssign ::=
	 function_call | variableDef | assignment

function_call ::=
	 identifier "(" ((parameter ",")* parameter)? ")"

ifStatement ::= 
	"if" "(" logicalExpression ")" ":" newline
	(tab statement newline)+

whileLoop ::= 
	"while" "(" logicalExpression ")" ":" newline
	(tab statement newline)+

forLoop ::= 
	"for" identifier "in" "range"
    "(" integerConstant "," integerConstant ")" ":" newline
	(tab statement newline)+

functionDef ::= 
	"def" identifier 
	"(" ( ((identifier ":" type) ",")* (identifier ":" type) )? ")"
	("->" type)? ":" newline
	(tab statement newline)+

assignment ::= 
	identifier "=" (value | identifier | function_call | logicalExpression)

variableDef ::= 
	identifier "=" type "(" ((parameter ",")* parameter)? ")"

program ::= (statement newline)*